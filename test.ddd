print "Hello and welcome to Dynamic Programming Language";

var x := 5;

print "x =", x;

if x > 0 then
    print "x is positive";
else
    print "x is non-positive";
end;

print "This is while loop";

while x > 0 loop
    print x;
    x := x - 1;
end;

print "x =", x;

print "This is for loop";

for i in 1 .. 5 loop
    print i;
end;

print "x + 10 =", x + 10;

var y := [1, 2, 3];

print "y[2] =", y[2];

var z := {a := 1, b:= 2, 123};

print "z.a =", z.a;

var add := func (a, b) is
    return a + b;
end;

var result := add(3, 4);

print "3 + 4 =", result;


var multiply := func (a, b) => a * b;

print "3 * 4 =", multiply(3, 4);


var fibonacci := func(n) is
    if (n <= 1) then
        return n;
    end;
    return fibonacci(n - 1) + fibonacci(n - 2);
end;

var fibonacci_num := 10;
print "Fibonacci for", fibonacci_num, "is", fibonacci(fibonacci_num);


var lst := [4, 2, 9, 7, 1, 11, 5];
var max := lst[1];
for i in 1 .. 7 loop
    if lst[i] > max then
        max := lst[i];
    end;
end;
print "max number is", max;


var matrix := [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]];
var sum := 0;
print matrix;
for i in 1 .. 3 loop
    var row_sum := 0;
    for j in 1 .. 4 loop
        row_sum := row_sum + matrix[i][j];
    end;
    print "sum of row", i, "is", row_sum;
    sum := sum + row_sum;
end;
print "sum of matrix is", sum;


var tup := {1, 2, {a:=4, b:=5, "qwe"}};

var tup1 := tup.3;
print "Element of tuple in tuple is: ", tup.3.a;


var f1 := func(a) is
  var f2 := func (x) => x + a;
  return f2;
end;

print "Result of sum in function closure is:", f1(3)(2);